"use strict";
exports.__esModule = true;
exports.typeDefs = void 0;
exports.typeDefs = "#graphql\n  # Comments in GraphQL strings (such as this one) start with the hash (#) symbol.\n\n  # This \"Book\" type defines the queryable fields for every book in our data source.\n  # Book type is for test only\n  type Book {\n    title: String\n    author: Author!\n  }\n\n  type Author {\n    name: String!\n    books: [Book!]\n  }\n\n  # Type is create from https://www.superheroapi.com/\n  type SuperHero {\n    id: ID!\n    name: String!\n    powerstats: Powerates!\n    biography:Biography!\n    appearance: Appearance!\n    work: Work\n    connections: Connections\n    image: Image\n  }\n  \n  #Int cannot represent non-integer value: \"null\"\n  type Powerates {\n    strength: String\n    intelligence: String\n    speed: String\n    durability: String\n    power: String\n    combat: String\n  }\n\n  type  Biography{\n    full_name: String\n    alter_egos: String\n    aliases: [String!]\n    place_of_birth: String\n    first_appearance: String\n    publisher: String!\n    alignment: String\n  }\n\n  type Appearance {\n    gender: String\n    race: String,\n    height: [String!],\n    weight: [ String!],\n    eye_color: String,\n    hair_color: String,\n  }\n\n  type Work {\n    occuption: String\n    base: String\n  }\n\n  type Connections {\n    group_affiliation: String,\n    relatives: String\n  }\n\n  type Image {\n    url: String\n  }\n\n  # not used\n  enum Gender {\n    FAMAL\n    MALE\n    OTHER\n  }\n  # not used\n  enum EyeHairColor {\n    BROWN\n    AMBER\n    HAZEI\n    GREEN\n    BLUE\n    GRAY\n    RED\n    BLOND\n  }\n\n   # Type is create to save data to database\n   type Heroinfo {\n    _id: ID\n    # Match to SuperHero.id\n    heroid: ID \n    token: String\n    name: String\n    powerstats: Powerates!\n    image: Image\n  }\n \n  # Input define\n  input GetSuperHeroNameInput {\n    name: String!\n    token: String!\n  }\n\n  input IdTokenInput {\n    id: ID!\n    token: String!\n  }\n\n  input UpdateHeroImageInput {\n    idToken: IdTokenInput,\n    url: String!\n  }\n\n  # Input used for access database\n  input imageInput {\n    url: String\n  }\n\n  input UpdateHeroPowerStatesInput {\n      intelligence: String\n      strength: String\n      speed: String\n      durability: String\n      power: String\n      combat: String\n  }\n\n  input CreateHeroinfoInput {\n    heroid: ID \n    token: String\n    name: String\n    powerstats: UpdateHeroPowerStatesInput\n    image: imageInput\n  }\n\n  input UpdateHeroByIdInput {\n    id: ID!\n    update: CreateHeroinfoInput!\n  }\n\n  # The \"Query\" type is special: it lists all of the available queries that\n  # clients can execute, along with the return type for each. In this\n  # case, the \"books\" query returns an array of zero or more Books (defined above).\n  type Query {\n    # Test data\n    books: [Book]\n    authors: [Author]\n    authorNames: [String!]\n    getAuthorByName(name: String!): Author\n\n    # API access \n    getSuperHeroByName(input: GetSuperHeroNameInput!): [SuperHero]\n    getSuperHeroById(input: IdTokenInput):SuperHero\n    #searchHeroname(input: GetSuperHeroNameInput!): [SuperHero]\n    #heroById(input: IdTokenInput):SuperHero\n\n    # DB access\n    getHeroinfos(input: IdTokenInput):[Heroinfo]\n    getHeroinfosByToken(token: String!):[Heroinfo]\n    getHeroinfosByHeroId(heroid: Int!): Heroinfo\n    getHeroinfoByName(name: String!):[Heroinfo]\n    getHeroinfoById(id: ID!): Heroinfo\n  }\n\n  type Mutation {\n    # CUD database\n    upsertHeroinfoByheroid(input: CreateHeroinfoInput): Heroinfo\n    createHeroinfo(input: CreateHeroinfoInput): Heroinfo\n    updateHeroinfoById(input: UpdateHeroByIdInput): Heroinfo\n    deleteHeroinfoById(input: String!): Heroinfo\n    deleteHeroinfoByHeroid(heroid: Int!): Heroinfo\n    updateHeroPowerStates( input: UpdateHeroPowerStatesInput): Powerates\n    updateHeroImage(id: ID!, token: String!, input: UpdateHeroImageInput): Image\n    deleteHeroPowerStates(input: IdTokenInput): Powerates\n    deleteHeroImage(input:UpdateHeroImageInput): Image\n  }\n  \n";
//# sourceMappingURL=type-defs.js.map